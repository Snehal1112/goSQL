package translators

import (
	"github.com/quintans/goSQL/db"
	tk "github.com/quintans/toolkit"
	"strings"
)

type FirebirdSQLTranslator struct {
	*GenericTranslator
}

func NewFirebirdSQLTranslator() db.Translator {
	this := new(FirebirdSQLTranslator)
	this.GenericTranslator = new(GenericTranslator)
	this.Init(this)
	this.QueryProcessorFactory = func() QueryProcessor { return NewQueryBuilder(this) }
	this.InsertProcessorFactory = func() InsertProcessor { return NewInsertBuilder(this) }
	this.UpdateProcessorFactory = func() UpdateProcessor { return NewUpdateBuilder(this) }
	this.DeleteProcessorFactory = func() DeleteProcessor { return NewDeleteBuilder(this) }
	return this
}

var _ db.Translator = &FirebirdSQLTranslator{}

func (this *FirebirdSQLTranslator) GetAutoKeyStrategy() db.AutoKeyStrategy {
	return db.AUTOKEY_BEFORE
}

func (this *FirebirdSQLTranslator) GetAutoNumberQuery(column *db.Column) string {
	return "select GEN_ID(" + column.GetTable().GetName() + "_GEN, 1) from RDB$DATABASE"
}

// INSERT
// 2013-06-15: available odbc drivers do not implement RETURNING
/*
func (this *FirebirdSQLTranslator) GetSqlForInsert(insert *db.Insert) string {
	// insert generated by super
	sql := this.GenericTranslator.GetSqlForInsert(insert)

	// only ONE numeric id is allowed
	// if no value was defined for the key, it is assumed an auto number,
	// otherwise is a guid (or something else)
	if !insert.HasKeyValue {
		str := tk.NewStrBuffer()
		str.Add(sql, " RETURNING ", this.overrider.ColumnName(insert.GetTable().GetSingleKeyColumn()))
		sql = str.String()
	}

	return sql
}
*/

func (this *FirebirdSQLTranslator) TableName(table *db.Table) string {
	return "\"" + strings.ToUpper(table.GetName()) + "\""
}

func (this *FirebirdSQLTranslator) ColumnName(column *db.Column) string {
	return "\"" + strings.ToUpper(column.GetName()) + "\""
}

// TODO: implement PaginateSQL
func (this *FirebirdSQLTranslator) PaginateSQL(query *db.Query, sql string) string {
	sb := tk.NewStrBuffer()
	if query.GetLimit() > 0 {
		sb.Add(sql, " ROWS ")
		if query.GetOffset() > 0 {
			sb.Add(":", db.OFFSET_PARAM, " TO ")
			query.SetParameter(db.OFFSET_PARAM, query.GetOffset()+1)
		}
		sb.Add(":", db.LIMIT_PARAM)
		query.SetParameter(db.LIMIT_PARAM, query.GetOffset()+query.GetLimit())

		return sb.String()
	}

	return sql
}
